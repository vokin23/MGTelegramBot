import asyncio

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from app.init import redis_manager
from datetime import datetime
from aiogram.enums import ParseMode
from aiogram import types, Bot, Dispatcher
from aiogram.filters import Command, StateFilter
from sqlalchemy.dialects.mysql import insert
from sqlalchemy import insert, select
from app.config import settings
from app.datebase import async_session_maker
from app.keyboards.admin import admin_start, publish_post_kb
from app.keyboards.start import keyboard_start
from app.models.posts import Post
from aiogram.fsm.state import State, StatesGroup
from app.models import UserTelegram
from aiogram.fsm.context import FSMContext

bot = Bot(token=settings.TOKEN)
dp = Dispatcher()


class OnlinePost(StatesGroup):
    text = State()


class PublishOldPost(StatesGroup):
    cheek = State()
    id = State()


class CreatePost(StatesGroup):
    text = State()
    time_posted_post = State()


class CreateEvent(StatesGroup):
    text = State()
    promo = State()


async def cheek_or_create_user(message: types.Message):
    async with async_session_maker() as session:
        user_stmt = select(UserTelegram).where(UserTelegram.username == message.from_user.username)
        user = await session.execute(user_stmt)
        user = user.scalars().first()
        if user is None:
            user = insert(UserTelegram).values(username=message.from_user.username,
                                               first_name=message.from_user.first_name,
                                               last_name=message.from_user.last_name,
                                               user_id=message.from_user.id).returning(UserTelegram)
            user = await session.execute(user)
            await session.commit()
            user = user.scalar()
        return user


@dp.message(Command(commands=['start']))
async def start(message: types.Message):
    if (await cheek_or_create_user(message)).admin:
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.username}.\n"
                             "–°–µ–π—á–∞—Å —è –ø–æ–∫–∞–∂—É —Ç–µ–±–µ —ç–∫—Ä–∞–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, "
                             "–Ω–∞ –Ω–µ–π —Ç—ã —Å–º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞!", reply_markup=admin_start)

    if not (await cheek_or_create_user(message)).admin:
        await message.answer("–ü—Ä–∏–≤–µ—Ç, –Ø –±–æ—Ç Mind Games.\n"
                             "–°–µ–π—á–∞—Å —è –ø–æ–∫–∞–∂—É —Ç–µ–±–µ —ç–∫—Ä–∞–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, "
                             "–Ω–∞ –Ω–µ–π —Ç—ã —Å–º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞!", reply_markup=keyboard_start)


@dp.callback_query(lambda c: c.data == 'start_game')
async def start_game_callback(callback_query: types.CallbackQuery):
    await callback_query.message.answer(
        "üöÄ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä DayZ\\!*\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∏–≥—Ä—ã, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∏ —Å–∫–∞—á–∞—Ç—å –µ—ë –ø–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Å—ã–ª–∫–µ:\n"
        "[–°–∫–∞—á–∞—Ç—å DayZ](https://store.steampowered.com/app/221100/DayZ/)\n\n"
        "‚ùå *–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –ø–∏—Ä–∞—Ç—Å–∫–∏–µ –≤–µ—Ä—Å–∏–∏ –∏–≥—Ä—ã –Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –∏–≥—Ä—ã –Ω–∞ –¥–∞–Ω–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ\\.*\n\n"
        "üìã *–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:*\n"
        "1\\. –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –µ–≥–æ –õ–û–†\\.\n"
        "2\\. –í –ª–∞—É–Ω—á–µ—Ä–µ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ *–ü–ê–†–ê–ú–ï–¢–†–´* '–í–°–ï –ü–ê–†–ê–ú–ï–¢–†–´' —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≥–∞–ª–æ—á–∫—É –≤ –ø–æ–ª–µ ¬´–ò–º—è –ø—Ä–æ—Ñ–∏–ª—è¬ª\\. –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∏–≥—Ä–æ–≤–æ–π –ø–æ–∑—ã–≤–Ω–æ–π —Ç–∞–∫ –∂–µ, –∫–∞–∫ –≤ Discord\\. "
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¢–û–õ–¨–ö–û –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã\\.\n"
        "   ‚ö† –ò–≥—Ä–æ–∫–∏ —Å –Ω–∏–∫–Ω–µ–π–º–∞–º–∏ ¬´SURVIVOR¬ª –Ω–µ –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è –∫ –∏–≥—Ä–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ\\.\n"
        "3\\. –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–æ–∑—ã–≤–Ω–æ–π, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É *¬´–°–ï–†–í–ï–†–´¬ª* \\-\\> *¬´–°–û–û–ë–©–ï–°–¢–í–û¬ª* –∏ –Ω–∞–π–¥–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä *Mind Games DayZ STALKER* \\(–∏–ª–∏ –ø–æ IP \\- 185\\.207\\.214\\.145:2302\\)\\. "
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫—Ä–∞—Å–Ω—É—é –∫–Ω–æ–ø–∫—É *¬´–í–°–¢–£–ü–ò–¢–¨¬ª* \\-\\> *¬´–£–°–¢–ê–ù–û–í–ò–¢–¨ –ú–û–î–´ –ò –î–û–ü–û–õ–ù–ï–ù–ò–Ø¬ª*, —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É\\. –î–∞–ª—å—à–µ –º–æ–¥—ã –∑–∞–≥—Ä—É–∑—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\\.\n\n"
        "üîó [–°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é –º–æ–¥–æ–≤](https://steamcommunity.com/sharedfiles/filedetails/?id=2879158215)",
        parse_mode=ParseMode.MARKDOWN_V2
    )


@dp.callback_query(lambda c: c.data == 'donat')
async def donat_callback(callback_query: types.CallbackQuery):
    await callback_query.message.answer(
        "ü§≤ *–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è* \\- —ç—Ç–æ –ª–∏—á–Ω–æ–µ –∂–µ–ª–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –ø–æ–º–æ—á—å –ø—Ä–æ–µ–∫—Ç—É —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è\\.\n"
        "üí° *–ù–∏–∫—Ç–æ –Ω–µ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –≤–∞—Å –¥–µ–ª–∞—Ç—å —ç—Ç–æ\\. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–º–µ–π—Ç–µ –≤ –≤–∏–¥—É, —á—Ç–æ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è –Ω–µ –ø–æ–¥–ª–µ–∂–∞—Ç –≤–æ–∑–≤—Ä–∞—Ç—É\\.*\n\n"
        "üåü *–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç, –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏:*\n"
        "1\\. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç—É: *2202 2061 9960 2256*\\.\n"
        "2\\. –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º —Å–∞–π—Ç–æ–º: [Mind Games Project](https://mindgamesproject.ru/)\n\n"
        "üôè *–°–ø–∞—Å–∏–±–æ –≤–∞–º –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É\\!* –ú—ã —Å—Ç—Ä–µ–º–∏–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç, –∏ –¥–ª—è —ç—Ç–æ–≥–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, —Å–∏–ª –∏ —Å—Ä–µ–¥—Å—Ç–≤\\.\n"
        "üì© *–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è—Ö –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –Ω–∞–ø—Ä—è–º—É—é –∫ —Å–æ–∑–¥–∞—Ç–µ–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞\\.*",
        parse_mode=ParseMode.MARKDOWN_V2
    )


@dp.callback_query(lambda c: c.data == 'game_servers')
async def game_servers_callback(callback_query: types.CallbackQuery):
    await callback_query.message.answer(
        "ü§≤ *–°–ø–∏—Å–æ–∫ –Ω–∞—à–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤:*\n"
        "1\\. *Mind Games S\\.T\\.A\\.L\\.K\\.E\\.R\\. RP*\\.\n"
        "*–ê–¥—Ä–µ—Å* \\- 195\\.18\\.27\\.49\n"
        "*–ü–æ—Ä—Ç* \\- 2302\n"
        "*Discord —Å–µ—Ä–≤–µ—Ä* \\- [Mind Games Project STALKER](https://discord.gg/mgstalkerrp)\n\n"
        "2\\. *Mind Games life RP*\n"
        "*–ê–¥—Ä–µ—Å* \\- 185\\.207\\.214\\.145\n"
        "*–ü–æ—Ä—Ç* \\- 2302\n"
        "*Discord —Å–µ—Ä–≤–µ—Ä* \\- [Mind Games Project Life](https://discord.gg/SWzXJJmu7n)\n\n",
        parse_mode=ParseMode.MARKDOWN_V2
    )


@dp.callback_query(lambda c: c.data == 'create_event')
async def create_event_callback(callback_query: types.CallbackQuery, state: FSMContext):
    pass


@dp.callback_query(lambda c: c.data == 'create_post')
async def create_post_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞")
    await state.set_state(CreatePost.text)


@dp.message(StateFilter(CreatePost.text))
async def time_posted_post(message: types.Message, state: FSMContext):
    await state.update_data(text=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –±—É–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞. –ü—Ä–∏–º–µ—Ä: 2021-09-01 12:00")
    await state.set_state(CreatePost.time_posted_post)


@dp.message(StateFilter(CreatePost.time_posted_post))
async def create_post(message: types.Message, state: FSMContext):
    await state.update_data(time_posted_post=message.text)
    data = await state.get_data()
    await message.answer(f"–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞: {data['text']}\n"
                         f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {data['time_posted_post']}")
    async with async_session_maker() as session:
        new_post = insert(Post).values(content=data['text'],
                                       time_created=datetime.now().strftime("%Y-%m-%d %H:%M"),
                                       time_posted=data['time_posted_post'],
                                       user_id=message.from_user.id).returning(Post).returning(Post)
        new_post = await session.execute(new_post)
        await session.commit()
        new_post = new_post.scalar()
    await message.answer(f"–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! ID –ø–æ—Å—Ç–∞: {new_post.id}")
    await state.clear()


@dp.callback_query(lambda c: c.data == 'publish_post')
async def publish_post_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–í—ã–±—É—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç:", reply_markup=publish_post_kb)
    await state.set_state(CreatePost.text)


@dp.callback_query(lambda c: c.data == 'publish_new_post')
async def publish_new_post_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞")
    await state.set_state(OnlinePost.text)


@dp.message(StateFilter(OnlinePost.text))
async def create_post(message: types.Message, state: FSMContext):
    await state.update_data(text=message.text)
    data = await state.get_data()
    await message.answer(f"–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞: {data['text']}\n"
                         f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {datetime.now().strftime("%Y-%m-%d %H:%M")}")
    async with async_session_maker() as session:
        new_post = insert(Post).values(content=data['text'],
                                       time_created=datetime.now().strftime("%Y-%m-%d %H:%M"),
                                       time_posted=datetime.now().strftime("%Y-%m-%d %H:%M"),
                                       user_id=message.from_user.id,
                                       posted=True).returning(Post).returning(Post)
        new_post = await session.execute(new_post)
        await session.commit()
        new_post = new_post.scalar()
        await bot.send_message(chat_id=settings.MAIN_CHANNEL, text=new_post.content)
    await message.answer(f"–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω! ID –ø–æ—Å—Ç–∞: {new_post.id}")
    await state.clear()


@dp.callback_query(lambda c: c.data == 'set_publish_old_post')
async def select_post_callback(callback_query: types.CallbackQuery):
    async with async_session_maker() as session:
        posts = await session.execute(select(Post).where(Post.posted == False))
        posts = posts.scalars().all()
        if not posts:
            await callback_query.message.answer("–ù–µ—Ç –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
            return
        buttons = [InlineKeyboardButton(text=str(post.id), callback_data=f"post_{post.id}") for post in posts]
        kb = InlineKeyboardMarkup(inline_keyboard=[buttons], row_width=5 if len(buttons) > 5 else len(buttons))

    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç —á—Ç–æ–±—ã –ø–æ–¥—Ä–æ–±–Ω–æ –µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å:", reply_markup=kb)


@dp.callback_query(lambda c: c.data.startswith('post_'))
async def view_post_callback(callback_query: types.CallbackQuery, state: FSMContext):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', callback_data='publish')],
        [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='set_publish_old_post')]
    ])
    async with async_session_maker() as session:
        post_stmt = select(Post).where(Post.id == int(callback_query.data.split('_')[1]))
        post_obj = await session.execute(post_stmt)
        post = post_obj.scalar()  # Corrected method call
        await state.set_state(PublishOldPost.id)
        await state.update_data(post_id=post.id)
    await callback_query.message.answer(f"ID –ø–æ—Å—Ç–∞: {post.id}\n"
                                        f"–¢–µ–∫—Å—Ç: {post.content}\n", reply_markup=kb)


@dp.callback_query(lambda c: c.data == 'publish')
async def publish_new_post(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    async with async_session_maker() as session:
        post_stmt = select(Post).where(Post.id == data['post_id'])
        post_obj = await session.execute(post_stmt)
        post = post_obj.scalar()
        post.posted = True
        await session.commit()
    await bot.send_message(chat_id=settings.MAIN_CHANNEL, text=post.content)
    await callback_query.message.answer("–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
    await state.clear()


async def on_startup():
    print("Start")
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(redis_manager.connect())
    asyncio.run(on_startup())
